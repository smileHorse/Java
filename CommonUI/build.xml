<?xml version="1.0" encoding="UTF-8"?>
<!--该ant构建脚本，是根据新主站项目所定义的目录结构，设计的构建模板
  其它各功能模块的构建脚本，只需根据此模板对提示修改的两处地方进行简单修改，即可满足需求
  一是项目名称app.name 二是如果需要将配置文件打包到jar中，修改copy语句
-->
<project name="AntTest" default="run" basedir=".">

<!-- properies --> 

<!-- 修改下面的项目name-->
<property name="app.name" value="CommonUI"/>  
 

<property name="app.jar" value="${app.name}.jar"/> 
<property name="src.dir" location="src" />
<property name="build.classes" location="bin" />
<property name="deployname" location="./dist/${app.jar}" />
<property name="lib.dir" location="./lib" />
<property name="extlib.dir" location="./ext-lib" />
<property name="dist.dir" location="./dist" />
<property name="doc.dir" value="./doc/internal/${app.name}" />


<!-- 定义classpath --> 

<path id="lib.path">   
   <fileset dir="${lib.dir}">
	    <include name="*.jar"/>
	    <include name="**/*.jar"/>
  </fileset>
  <fileset dir="${extlib.dir}">
	    <include name="*.jar"/>
	    <include name="**/*.jar"/>
  </fileset>
  <fileset dir="${dist.dir}">
	    <include name="*.jar"/>
	    <include name="**/*.jar"/>
  </fileset>
   <pathelement path="${build.classes}"/>
</path>

<!-- 初始化任务--> 


<target name="init">
	<delete dir="bin"/>
  <mkdir dir="bin"/>
</target>	

<!-- 编译--> 
	
<target name="compile" depends="init" description="compile the source files">	
	<echo message="${lib.dir}"/>
	<javac srcdir="${src.dir}" destdir="${build.classes}" target="1.8">
		<compilerarg line="-encoding UTF-8 "/> 
    	<classpath refid="lib.path"/>
  	</javac>
  	<!-- 如果需将配置文件打包到jar中，则需要修改，否则删除下面一句 
  	-->
  	<!--
 	<copy todir="${build.classes}/" file="${src.dir}/cimtools-rmi-a.xml"/>
	<copy todir="${build.classes}/" file="${src.dir}/cimtools-rmi-b.xml"/>
	<copy todir="${build.classes}/" file="${src.dir}/cim.rdf"/>
	<copy todir="${build.classes}/" file="${src.dir}/listcimview.rdf"/>
  	<copy todir="${build.classes}" >
	    <fileset dir="${src.dir}">
	     <patternset>
	     	<include name="**/*.conf" />     
	     	      <include name="**/*.properties" />
	     	      <include name="**/*.xml" />
	     	      <include name="**/*.xls" />
	     	      <include name="**/*.bmp" />
	     	      <include name="**/*.gif" />
	     	      <include name="**/*.png" />
	     	      <include name="**/*.jpg" />
	     </patternset>
	    </fileset>
	</copy>
	-->
</target>


<!-- 打包成jar --> 
	
<target name="dist_jar" depends="compile">
	  <delete file="${deployname}"/>
	  <jar destfile="${deployname}" basedir="${build.classes}" includes="**/*.*" manifest="manifest.mf">
	  	 
	  </jar>
</target>

<!-- 输出api文档 --> 
<target name="doc" depends="dist_jar" description="create api doc"> 
<delete dir="${doc.dir}"/>
<mkdir dir="${doc.dir}" /> 
<javadoc destdir="${doc.dir}" author="true" version="true" use="true" windowtitle="${app.name}" >
<classpath refid="lib.path"/> 
<packageset dir="${src.dir}" defaultexcludes="yes"> 
<include name="**"/> 
</packageset> 
</javadoc> 
</target>


<!-- 执行程序 --> 
<!--若是带参执行或是调用IceNode执行，要修改此执行脚本-->

<target name="run" depends="dist_jar,doc">
	<java jar="${deployname}" fork="true">  
  </java> 
</target>

</project>



